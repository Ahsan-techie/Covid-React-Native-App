{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { ContinousBaseGesture } from \"./gesture\";\nexport var PanGesture = function (_ContinousBaseGesture) {\n  _inherits(PanGesture, _ContinousBaseGesture);\n\n  var _super = _createSuper(PanGesture);\n\n  function PanGesture() {\n    var _this;\n\n    _classCallCheck(this, PanGesture);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"config\", {});\n\n    _this.handlerName = 'PanGestureHandler';\n    return _this;\n  }\n\n  _createClass(PanGesture, [{\n    key: \"activeOffsetY\",\n    value: function activeOffsetY(offset) {\n      if (Array.isArray(offset)) {\n        this.config.activeOffsetYStart = offset[0];\n        this.config.activeOffsetYEnd = offset[1];\n      } else if (offset < 0) {\n        this.config.activeOffsetYStart = offset;\n      } else {\n        this.config.activeOffsetYEnd = offset;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"activeOffsetX\",\n    value: function activeOffsetX(offset) {\n      if (Array.isArray(offset)) {\n        this.config.activeOffsetXStart = offset[0];\n        this.config.activeOffsetXEnd = offset[1];\n      } else if (offset < 0) {\n        this.config.activeOffsetXStart = offset;\n      } else {\n        this.config.activeOffsetXEnd = offset;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"failOffsetY\",\n    value: function failOffsetY(offset) {\n      if (Array.isArray(offset)) {\n        this.config.failOffsetYStart = offset[0];\n        this.config.failOffsetYEnd = offset[1];\n      } else if (offset < 0) {\n        this.config.failOffsetYStart = offset;\n      } else {\n        this.config.failOffsetYEnd = offset;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"failOffsetX\",\n    value: function failOffsetX(offset) {\n      if (Array.isArray(offset)) {\n        this.config.failOffsetXStart = offset[0];\n        this.config.failOffsetXEnd = offset[1];\n      } else if (offset < 0) {\n        this.config.failOffsetXStart = offset;\n      } else {\n        this.config.failOffsetXEnd = offset;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"minPointers\",\n    value: function minPointers(_minPointers) {\n      this.config.minPointers = _minPointers;\n      return this;\n    }\n  }, {\n    key: \"maxPointers\",\n    value: function maxPointers(_maxPointers) {\n      this.config.maxPointers = _maxPointers;\n      return this;\n    }\n  }, {\n    key: \"minDistance\",\n    value: function minDistance(distance) {\n      this.config.minDist = distance;\n      return this;\n    }\n  }, {\n    key: \"minVelocity\",\n    value: function minVelocity(velocity) {\n      this.config.minVelocity = velocity;\n      return this;\n    }\n  }, {\n    key: \"minVelocityX\",\n    value: function minVelocityX(velocity) {\n      this.config.minVelocityX = velocity;\n      return this;\n    }\n  }, {\n    key: \"minVelocityY\",\n    value: function minVelocityY(velocity) {\n      this.config.minVelocityY = velocity;\n      return this;\n    }\n  }, {\n    key: \"averageTouches\",\n    value: function averageTouches(value) {\n      this.config.avgTouches = value;\n      return this;\n    }\n  }, {\n    key: \"enableTrackpadTwoFingerGesture\",\n    value: function enableTrackpadTwoFingerGesture(value) {\n      this.config.enableTrackpadTwoFingerGesture = value;\n      return this;\n    }\n  }]);\n\n  return PanGesture;\n}(ContinousBaseGesture);","map":{"version":3,"sources":["panGesture.ts"],"names":["constructor","activeOffsetY","Array","offset","activeOffsetX","failOffsetY","failOffsetX","minPointers","maxPointers","minDistance","minVelocity","minVelocityX","minVelocityY","averageTouches","enableTrackpadTwoFingerGesture"],"mappings":"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","sourcesContent":["import { BaseGestureConfig, ContinousBaseGesture } from './gesture';\nimport {\n  PanGestureConfig,\n  PanGestureHandlerEventPayload,\n} from '../PanGestureHandler';\n\nexport class PanGesture extends ContinousBaseGesture<PanGestureHandlerEventPayload> {\n  public config: BaseGestureConfig & PanGestureConfig = {};\n\n  constructor() {\n    super();\n\n    this.handlerName = 'PanGestureHandler';\n  }\n\n  activeOffsetY(offset: number | number[]) {\n    if (Array.isArray(offset)) {\n      this.config.activeOffsetYStart = offset[0];\n      this.config.activeOffsetYEnd = offset[1];\n    } else if (offset < 0) {\n      this.config.activeOffsetYStart = offset;\n    } else {\n      this.config.activeOffsetYEnd = offset;\n    }\n    return this;\n  }\n\n  activeOffsetX(offset: number | number[]) {\n    if (Array.isArray(offset)) {\n      this.config.activeOffsetXStart = offset[0];\n      this.config.activeOffsetXEnd = offset[1];\n    } else if (offset < 0) {\n      this.config.activeOffsetXStart = offset;\n    } else {\n      this.config.activeOffsetXEnd = offset;\n    }\n    return this;\n  }\n\n  failOffsetY(offset: number | number[]) {\n    if (Array.isArray(offset)) {\n      this.config.failOffsetYStart = offset[0];\n      this.config.failOffsetYEnd = offset[1];\n    } else if (offset < 0) {\n      this.config.failOffsetYStart = offset;\n    } else {\n      this.config.failOffsetYEnd = offset;\n    }\n    return this;\n  }\n\n  failOffsetX(offset: number | number[]) {\n    if (Array.isArray(offset)) {\n      this.config.failOffsetXStart = offset[0];\n      this.config.failOffsetXEnd = offset[1];\n    } else if (offset < 0) {\n      this.config.failOffsetXStart = offset;\n    } else {\n      this.config.failOffsetXEnd = offset;\n    }\n    return this;\n  }\n\n  minPointers(minPointers: number) {\n    this.config.minPointers = minPointers;\n    return this;\n  }\n\n  maxPointers(maxPointers: number) {\n    this.config.maxPointers = maxPointers;\n    return this;\n  }\n\n  minDistance(distance: number) {\n    this.config.minDist = distance;\n    return this;\n  }\n\n  minVelocity(velocity: number) {\n    this.config.minVelocity = velocity;\n    return this;\n  }\n\n  minVelocityX(velocity: number) {\n    this.config.minVelocityX = velocity;\n    return this;\n  }\n\n  minVelocityY(velocity: number) {\n    this.config.minVelocityY = velocity;\n    return this;\n  }\n\n  averageTouches(value: boolean) {\n    this.config.avgTouches = value;\n    return this;\n  }\n\n  enableTrackpadTwoFingerGesture(value: boolean) {\n    this.config.enableTrackpadTwoFingerGesture = value;\n    return this;\n  }\n}\n\nexport type PanGestureType = InstanceType<typeof PanGesture>;\n"]},"metadata":{},"sourceType":"module"}